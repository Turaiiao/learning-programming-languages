同步 Synchronous：

  我有一辆汽车和自行车，要把他们都开到某个地方，先开汽车，或者先开自行车，返回后再开剩下的

异步 Asynchronous：

  把汽车或者自行车邮寄，开剩下的一辆去，邮寄到后会给我发消息提示

进程 Process：

  每个程序，软件服务是一个进程，进程至少有一个的线程

线程 Thread：

  线程共用进程分配的资源

调度 Dispatch:

  当线程的数量小于处理器的数量时，才是真正的并发。不同的线程运行在不同的处理器上。
  但当线程的数量大于处理器的数量时，线程的并发会受到一些阻碍，
  此时并不是真正的并发，因为此时至少有一个处理器会运行多个线程

  创建，就绪，运行，阻塞，退出

协程 Coroutine：

  基于线程，比线程更轻量级。由程序员自己来管理的轻量级线程

  - 线程可以拥有多个协程
  - 目的是当出现长时间 IO 操作，让出目前协程调度，执行下一个任务，消除开销

  · 线程由操作系统调度，协程由程序员调度。减少上下文切换
  · 线程栈大小 1M，而协程栈大小 1K，可在相同的内存中开启更多的协程
  · 协程在同一个线程上，可避免竞争关系，例如加锁
  · 适用于被阻塞的，且需要大并发的场景，不适用于多计算的场景

并发 Concurrency：

  · 有一套方案，让多人把事情做得更高效，没有谁先谁后的关系，关系不确定
  · 执行层面中，不确定谁先执行，所以任何一方的表达值不可确定
  · 如果 A 需要 B 的执行结果，那么任务不是并发的，实现层面需要用锁或者通道

  并发模型：

    - 几个任务是并发的
    - 任务之间怎么交互协作

    · Fork & Join （大任务拆解小任务并发，结果再拼接）
    · Actor       （步骤之间直接发送消息）
    · CSP         （步骤之间订阅通话频道来协作）
    · Lock        （共享中间变量，加解锁用来协作）

并行 Parallelism：

  并发的执行层面，并行取决于物理机有多少核芯

串行 Serial：

  是一个人按照一定的步骤来做，就是串行