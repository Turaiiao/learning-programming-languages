// THIS FILE WAS LICENSED BY TURAIIAO AT 2021. ALL RIGHTS RESERVED.
//
def Book
    def id: int
    def title: str
    def date: str
    
    pub def () toString -> str
        ret "Book {$id, $title, $date}"
    end
end

def ids: list<int> = []

pub def (id: int, title + date: str) create -> Book
    tif ids.hasElement(id)
        ret nil
    eif ids.length == 0 && id <= 0:
        ret nil
    els
        ret nil
    end
    ret new Book{id, title, date}
end

use std

def () main
    create(1, "The Compilers.", "2021.02.03") and
        std.println(
            it.toString()
        )
    end
    //
    def x: int = 0
    for
        println("x: ", x)
        //
        tif x > 10000
            out
        els
            x ++
            tin
        end
    end
    //
    tdo
        tif x != 0
            println("START !!")
        end
    for x > 0
        println("CALL..", x)
    end
    //
    def arr: list<any> = ['g', 34, 9.42, nil, "OK"] and
        it.forEach -> (
            k: int, 
            v: any
        )
            tif v.type == integer
                print("int : ")
            end
            println(k, v)
        end
    end
    //
    def x = 34
    def y = 71
    
    def (a + b: int) max -> (int, bol)
        tif a > b
            ret (a, tru)
        els
            ret (b, fal)
        end
    end
    
    println(max(x, y))
    //
    def x: map<int, str> = {}
    
    x[4] = "Banana"
    x[2] = "Orange"
    x[6] = "Apple"
    
    // map<int, str> -> {
    //     4: "Banana"
    //     2: "Orange"
    //     6: "Apple"
    // }
    println(x)
    //
    def Human
        pub def () sleep
        pub def (str) say -> bol
        
        pub def () toString -> str
            ret `
                Human:
                
                    sleep !
                    say, back the content of say.
            `
        end
    end
    
    def Eat
        pub def () eat -> bol
    end
    
    def Peop <- Human + Eat
        def name: str
        def age: int
        
        pub def () sleep
            println("$name to sleep !")
        end
        
        pub def (cont: str) say -> bol
            tif age >= 6
                println("$name say: $cont")
                ret tru
            els
                println("$name can not to say !")
                ret fal
            end
        end
        
        pub def () eat -> bol
            ret tru
        end
    end
    
    def x = new Peop {name: "frank", age: 18}
    def y = new Peop {name: "july",  age: 3 }
    
    x.sleep()
    y.sleep()
    
    x.say("Hello !")
    y.say("Hello !")
    
    x.eat()
    y.eat()
end
