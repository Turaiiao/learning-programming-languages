// THIS FILE WAS LICENSED BY Turaiiao AT 01.03.2020 ALL RIGHTS RESERVED.

// import <module>.<into> -> * | <mod> | <mod> as <alias> | <mod> show <ident> | + ...
import std.iter -> *
import std.http -> session + socket as sk + url
import std.collection -> HashMap show MapIndexes + BinaryTree as BT

// <modifier> fun <ident>(<param...>) -> <ret> | => <stmt> | <block>
fun main() ~>
    // var mut | ref <ident> = <expr>
    var mut a = 45 + 4 * 3 - (3 + 5)
    var mut a = true | false
    var ref a = [1, 2, 3, 4, 5]
    var ref a = (34, 4.5, "Fuck", 'h', false, [4, 3, 2, 1])

    // var mut | ref <ident> -> (param...) -> <ret> | => <stmt> | <block>
    var sum (a: int, b: int) -> int => a + b
    var mul (a: int, b: int, term: fun (int, int) -> int) -> int ~>
        var sum = term(a, b)
        
        return if sum > 100 & sum % 2 == 0 ->
            a * b
        else ->
            sum += 1
    end
    
    var x = mul(34, 55, fun (x: int, y: int) -> int ~>
        return x + y * 2
    end)
    
    // println "你好，${addTwoNumbers()(20, 20)}！"
    open var ref addTwoNumbers () -> fun (int, int) -> string =>
        fun (x: int, y: int) -> string ~>
            if x > y ->
                return "turaiiao"
            else ->
                return "$a$b"
        end
    end
    
    // println <expr>
    // return ()
    var ref fn = fun () -> char ~>
        println "Called！"
        return '#'
    end
    // <expr>
    println fn()

    fun add(x: int) -> int => ++ x
    fun add(x: int) -> [int] ~>
        // return <expr>
        return [45, 66, 33]
    end

    // if <expr> -> <stmt> | ~> <block>
    if 1 + 1 >= 2 ~>
        println "Hello"
        println "World"
    // elif <expr> -> <stmt> | ~> <block>
    elif false ~>
        println "Test"
    // else <expr> -> <stmt> | ~> <block>
    else ->
        println "World"
    end

    // if <varDecoration>; <expr> -> <stmt> | <block>
    if var x = 2 + 3; x > 5 ~>
        println "What's the problem ?"
    elif true ->
        println "Haha !!"
    end
end

// open | static | const

// fun <ident><<generic...>>(param...) -> <ret> => <stmt> | <block>
fun add<T>(x: int, y: T) -> (T, boolean) =>
    if y is int == false ->
        (nil, false)
    else ->
        (x + y as int, true)

fun buildThree(num: int, name: string, range: int) =>
    // Tuple
    println (num, name, age)
buildThree(34, range = 5, name = "turaiiao")

// trait <ident> ~> <block<func>> | -> func
trait TodoPunchListener ~>
    fun success()
    fun haveErr(message: string) -> int
end

// trait <ident> -> func | <block<func>>
trait TodoListener -> fun punch(listener: TodoPunchListener) -> boolean

// data <ident> -> (param...)
data Future -> (name: string, count: int)

enum Color -> (RED, GREEN, BLUE)

impl Color -> fun equal(x: Color) -> boolean => this == x

// impl <ident> : <ident> | + <ident>... <block> | -> <stmt>
impl Future : TodoListener + TodoPunchListener ~>
    // init -> <stmt> | <block>
    init -> println "Init..."

    // <method>
    fun alwaysBackTrue() -> boolean => true

    override fun punch(listener: TodoPunchListener) -> boolean ~>
        if this.alwaysBackTrue() ->
            listener.success(
                new Future("turaiiao", 18)
            )
        else ->
            listener.haveErr("Failed !")
        return true
    end

    override fun success() => println "Success !"
    
    override fun haveErr(message: string) -> int ~>
        println "Error: $message"
        return 401
    end
end

var mut index = 0

// magic -> <stmt> | <block>
magic ~>
    if index > 100 ->
        break
    index ++
end

// for <ident> <- <list> -> <stmt> | <block>
for i <- [1, 2, 3, 4, 5, 6, 7, 8] ~>
    if i % 2 == 0 ->
        println i
end

// while <expr> -> <stmt> | <block>
while true -> break

// when <expr> -> <stmt> | <caseBlock>
when 1 + 2 ~>
    // <value> -> <stmt> | <block>
    1 -> println "1"
    2 -> println "2"

    3 ~>
        println "3"
        println "OK !"
    end

    4 -> println "what's the problem ?"

    else -> println "error !"
end

// try -> <stmt> | <block>
try ~>
    var mut a = 30
    println a
// catch <ident> -> <stmt> | <block>
catch IOException ~>
    println "Fuck !!"
// finally -> <stmt> | <block>
finally ~>
    println "End !!"
end

// async <funcDecoration>
async fun getOrder() -> Order ~>
    return await http.backSomeOrderTest()
end

// await <expr>
await getOrder()
